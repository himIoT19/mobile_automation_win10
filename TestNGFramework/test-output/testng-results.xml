<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="13" passed="12">
  <reporter-output>
  </reporter-output>
  <suite name="Loan Department" duration-ms="275" started-at="2020-05-18T22:28:31Z" finished-at="2020-05-18T22:28:31Z">
    <groups>
      <group name="Smoke">
        <method signature="Test2.ploan()[pri:0, instance:test.first.Test2@1810399e]" name="ploan" class="test.first.Test2"/>
        <method signature="Test3.WebLoginCarLoan()[pri:0, instance:test.first.Test3@68be2bc2]" name="WebLoginCarLoan" class="test.first.Test3"/>
      </group> <!-- Smoke -->
    </groups>
    <test name="Personal Loan" duration-ms="70" started-at="2020-05-18T22:28:31Z" finished-at="2020-05-18T22:28:31Z">
      <class name="test.first.Test2">
        <test-method status="PASS" signature="PrerequisitesExecuteFirst()[pri:0, instance:test.first.Test2@1810399e]" name="PrerequisitesExecuteFirst" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrerequisitesExecuteFirst -->
        <test-method status="PASS" signature="DemoTwoPersonalLoan(java.lang.String, java.lang.String)[pri:0, instance:test.first.Test2@1810399e]" name="DemoTwoPersonalLoan" duration-ms="3" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[him9290.pythonanywhere.com/PersonalLoan]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[@four]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DemoTwoPersonalLoan -->
        <test-method status="PASS" signature="ploan()[pri:0, instance:test.first.Test2@1810399e]" name="ploan" duration-ms="2" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:test.first.Test2@1810399e]" name="AfterClass" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
        <test-method status="PASS" signature="PrererequisitesExecuteLast()[pri:0, instance:test.first.Test2@1810399e]" name="PrererequisitesExecuteLast" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PrererequisitesExecuteLast -->
      </class> <!-- test.first.Test2 -->
      <class name="test.first.Test1">
        <test-method status="PASS" signature="Demo()[pri:0, instance:test.first.Test1@32d992b2]" name="Demo" duration-ms="16" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method status="PASS" signature="AfterEvery()[pri:0, instance:test.first.Test1@32d992b2]" name="AfterEvery" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method status="FAIL" signature="SecondTest()[pri:0, instance:test.first.Test1@32d992b2]" name="SecondTest" duration-ms="3" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at test.first.Test1.SecondTest(Test1.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SecondTest -->
        <test-method status="PASS" signature="AfterEvery()[pri:0, instance:test.first.Test1@32d992b2]" name="AfterEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
      </class> <!-- test.first.Test1 -->
    </test> <!-- Personal Loan -->
    <test name="Car Loan" duration-ms="48" started-at="2020-05-18T22:28:31Z" finished-at="2020-05-18T22:28:31Z">
      <class name="test.first.Test3">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeClass" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="DependentOnOne()[pri:0, instance:test.first.Test3@68be2bc2]" name="DependentOnOne" duration-ms="3" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DependentOnOne -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="DependentOnOneThing(java.lang.String, java.lang.String)[pri:0, instance:test.first.Test3@68be2bc2]" name="DependentOnOneThing" duration-ms="4" started-at="2020-05-19T03:58:31Z" data-provider="getData" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstSetUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DependentOnOneThing -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="DependentOnOneThing(java.lang.String, java.lang.String)[pri:0, instance:test.first.Test3@68be2bc2]" name="DependentOnOneThing" duration-ms="3" started-at="2020-05-19T03:58:31Z" data-provider="getData" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondSetUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DependentOnOneThing -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="DependentOnOneThing(java.lang.String, java.lang.String)[pri:0, instance:test.first.Test3@68be2bc2]" name="DependentOnOneThing" duration-ms="2" started-at="2020-05-19T03:58:31Z" data-provider="getData" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdSetUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DependentOnOneThing -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="DependentOnTwo()[pri:0, instance:test.first.Test3@68be2bc2]" name="DependentOnTwo" duration-ms="3" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DependentOnTwo -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="WebLoginCarLoan()[pri:0, instance:test.first.Test3@68be2bc2]" name="WebLoginCarLoan" duration-ms="3" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLoginCarLoan -->
        <test-method status="PASS" signature="MobileLoginCarLoan(java.lang.String)[pri:0, instance:test.first.Test3@68be2bc2]" name="MobileLoginCarLoan" duration-ms="2" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[him9290.pythonanywhere.com/CarLoan]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLoginCarLoan -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="BeforeEvery()[pri:0, instance:test.first.Test3@68be2bc2]" name="BeforeEvery" is-config="true" duration-ms="0" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeEvery -->
        <test-method status="PASS" signature="LoginAPICarLoan()[pri:0, instance:test.first.Test3@68be2bc2]" name="LoginAPICarLoan" duration-ms="1" started-at="2020-05-19T03:58:31Z" depends-on-methods="test.first.Test3.DependentOnOne, test.first.Test3.DependentOnTwo" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginAPICarLoan -->
      </class> <!-- test.first.Test3 -->
    </test> <!-- Car Loan -->
    <test name="Home Loan" duration-ms="3" started-at="2020-05-18T22:28:31Z" finished-at="2020-05-18T22:28:31Z">
      <class name="test.first.Test3">
        <test-method status="PASS" signature="BFSuite()[pri:0, instance:test.first.Test3@68be2bc2]" name="BFSuite" is-config="true" duration-ms="9" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BFSuite -->
      </class> <!-- test.first.Test3 -->
      <class name="test.first.Test1">
        <test-method status="PASS" signature="AFSuite()[pri:0, instance:test.first.Test1@32d992b2]" name="AFSuite" is-config="true" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AFSuite -->
      </class> <!-- test.first.Test1 -->
      <class name="test.first.Test4">
        <test-method status="PASS" signature="WebLoginHomeLoan(java.lang.String)[pri:0, instance:test.first.Test4@457e2f02]" name="WebLoginHomeLoan" duration-ms="1" started-at="2020-05-19T03:58:31Z" finished-at="2020-05-19T03:58:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[him9290.pythonanywhere.com/HomeLoan]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLoginHomeLoan -->
      </class> <!-- test.first.Test4 -->
    </test> <!-- Home Loan -->
  </suite> <!-- Loan Department -->
</testng-results>
